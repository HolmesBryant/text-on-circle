/**
 *  Renders text on a circle
 *  @author Holmes Bryant <https://github.com/HolmesBryant>
 *  @license GPL-3.0
 */
export class TextOnCircle extends HTMLElement{shadow=ShadowRoot;#t="Need Text";#e="0 0 100 100";#i="none";#o="none";#n="inherit";#s="inherit";#h="inherit";#r="inherit";#l="1";static observedAttributes=["viewBox","fill","stroke","strokewidth","text","textcolor","font","fontsize","fontweight"];constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this.shadow.innerHTML=`    <style>      :host {        display: inline-block;        width: inherit;      }      path {        fill: ${this.fill};        stroke: ${this.stroke};      }      textPath {        fill: ${this.textcolor};        font-family: ${this.font};        font-weight: ${this.fontweight};        font-size: ${this.fontsize};      }    </style>    <svg viewbox="${this.viewBox}" xmlns="http://www.w3.org/2000/svg">      <g transform-origin="50% 50%" transform="rotate(270)">        <path id="circle"        d="M 50, 50 m -37, 0 a 37,37 0 1,1 74,0 a 37,37 0 1,1 -74,0"/>        <text>          <textPath          href="#circle"          startOffset="50%"          text-anchor="middle"          part="text-on-circle">          ${this.text}          </textPath>        </text>      </g>    </svg>    `}connectedCallback(){this.innerHTML.length>0&&(this.text=this.innerHTML),this.fontsize=this.getAttribute("fontsize")||this.fontsize}attributeChangedCallback(t,e,i){this[t]=i}get viewBox(){return this.#e}set viewBox(t){const e=this.tmpl.querySelector("svg");if(!e)throw new Error("Unable to find [svg] in component.");e.setAttribute("viewBox",t),this.#e=t}get fill(){return this.#i}set fill(t){this.#i=t;this.shadow.querySelector("svg > g > path").style.fill=t}get stroke(){return this.#o}set stroke(t){this.#o=t;this.shadow.querySelector("svg > g > path").style.stroke=t}get strokewidth(){return this.#l}set strokewidth(t){t||(t="1"),this.#l=t;this.shadow.querySelector("path").style.strokeWidth=t}get text(){return this.#t}set text(t){const e=this.shadow.querySelector("svg > g > text > textPath");if(!e)throw new Error(`Unable to find [textPath] in ${this.localName}.`);e.textContent=t,this.#t=t}get textcolor(){return this.#r}set textcolor(t){this.#r=t;this.shadow.querySelector("textPath").style.fill=t}get font(){return this.#n}set font(t){t||(t="inherit"),this.#n=t;this.shadow.querySelector("textPath").style.fontFamily=t}get fontsize(){return this.#h}set fontsize(t){t||(t="inherit"),this.#h=t;const e=this.shadow.querySelector("textPath");e.style.fontSize=t,console.log(t,e.style.fontSize)}get fontweight(){return this.#s}set fontweight(t){t||(t="inherit"),this.#s=t;const e=this.shadow.querySelector("textPath");e.style.fontWeight=t,console.log(t,e.style.fontWeight)}}document.addEventListener("DOMContentLoaded",customElements.define("text-on-circle",TextOnCircle));
